#!/bin/bash
# by komar@evologics.de

DIR_REPO=repo
DIR_PORTS=ports

VER=0.12
SRC_DIR=src

DO_CLEAN=true
DO_DEV_SHELL=false
VERBOSE=false

PROG=$(basename $0)

########################################
show_help() {
    cat <<- END 1>&2
        Usage: $PROG list|build|install|autoinstall|create|cleanall [plugin-dir]
        Make debian package for Trac Plugin

        -v  - verbose output
        -n  - do not remove sources after deb build
        -s  - run shell in prepared package directory before building

        list        - list of recipes
        build pkg   - build package
        install pkg - build package
        autoinstall repo-url - create recipe from repo-url (svn/git/trac-hacks.org autodetect)
        cleanall    - clean all ports
END
    exit 1
}
########################################

while getopts "nsv" OPT; do
    case $OPT in
        n) DO_CLEAN=false            ;;
        s) DO_DEV_SHELL=true         ;;
        v) VERBOSE=true              ;;
        *) echo "ERROR: invalid option" >&2 ;;
    esac
done

shift $((OPTIND - 1))
ACTION=$1
shift

ports_list() {
    pushd $DIR_PORTS > /dev/null
    find . -name get | sed 's,\./,,;s,/.*,,'
    popd > /dev/null
}

do_clean() {
    if [ ! -d "$1" -o ! -e "$1/get" ]; then
        echo "WARNING: directory $1 not port directory. skip" >&2
        return
    fi
    if [ -d "$1"/src -o -d "$1"/deb_dist ]; then
        $VERBOSE && echo clean "$1"
        rm -rf "$1"/src "$1"/deb_dist
    fi
}

do_build() {
    pushd $DIR_PORTS > /dev/null
    if [ ! -d "$1" -o ! -e "$1/get" ]; then
        echo "ERROR: directory $1 or file $1/get do not exist" >&2
        exit 3
    fi

    cd $1
    . ./get

    $VERBOSE && set -x

    DIRS=$(find $SRC_DIR -name setup.py)
    for F in $DIRS; do
        SRC_DIR_CURR=$(dirname $F)
        cd $SRC_DIR_CURR
        set -e
        python setup.py sdist
        cd -

        py2dsc $SRC_DIR_CURR/dist/*tar.gz

        pushd $(find deb_dist/* -maxdepth 0 -type d | grep -v orig) > /dev/null
        sed -i -e '/^\(Package:\) \(python-\(trac-\?\)\?\|trac-\?\)\?/!b;s//\1 trac-/;s/plugin//' debian/control

        if $DO_DEV_SHELL; then
            if ! bash -i; then
                exit $?
            fi
        fi

        dpkg-buildpackage -b -d -us -uc
        set +e
        popd > /dev/null

        pushd deb_dist > /dev/null
        PKG="$DIR_REPO/$(echo *deb) $PKG"
        popd > /dev/null
        mv deb_dist/*deb $DIR_REPO
        $DO_CLEAN && rm -fr $SRC_DIR_CURR deb_dist

        #cd ..
        #PKG="$PKG $(ls -t $1/*deb | head -n 1)"
        #cd - > /dev/null
    done
    $DO_CLEAN && [ -d $SRC_DIR ] && rm -rf $SRC_DIR

    popd > /dev/null # pushd $DIR_PORTS
    $VERBOSE && set +x
}

show_tips() {
    echo ===================
    echo sudo dpkg -i $PKG
    echo sudo service apache2 restart
}

get_csv() {
    case $@ in
        *svn*) echo "svn co $@";;
        *git*) echo "git clone $@";;
        *zip)  echo "wget -qO- '$@' | jac xv"
    esac
}

do_create() {
    U="$@"
    if echo "$U" | grep -q 'trac-hacks.org/wiki'; then
        P=$(wget -qO- "$U" | sed -n '/\(\(You can check out\|Check out\).*from\|.*checkout a copy using\)[^>]*href="/{s///;s/".*//p};/[Cc]heck out.*href="/{s///;s/".*//p}')
        if [ -z "$P" ]; then
            echo "ERROR: can't parse repository url from trac-hacks.org page" >&2
            exit 1
        fi

        case "$P" in
            http[s]://*) U=$P;;
            *)           U="https://trac-hacks.org$P" ;;
        esac
        unset P
    fi

    DIR=$(echo $U|sed 's,\(tags\)\?/\(trunk\|branch\|[0-9.]*\)/\?$,,;s,.*/\(trac-\?\)\?,,;s/\.git$//;s/.*/\L&\E/;s,/$,,')
    if [ -d "$DIR_PORTS/$DIR" ]; then
        echo "ERROR: directory $DIR_PORTS/$DIR already exist" >&2
        exit 1
    fi
    CMD=$(get_csv $U)
    if [ -z "$CMD" ]; then
        echo "ERROR: can't detect CSV from url" >&2
        exit 2
    fi
    mkdir -p $DIR_PORTS/$DIR
cat << END > $DIR_PORTS/$DIR/get
$CMD \$SRC_DIR
pushd \$SRC_DIR
# put paching commands here
popd
END
    export DIR
}

[ -d $DIR_REPO ] || mkdir -p $DIR_REPO

case $DIR_REPO in
    /*) ;;
    *) DIR_REPO=$PWD/$DIR_REPO ;;
esac

case $DIR_PORTS in
    /*) ;;
    *) DIR_PORTS=$PWD/$DIR_PORTS ;;
esac

[ -d $DIR_PORTS ] || mkdir -p $DIR_PORTS

case $ACTION in
    all|a)
        for P in $(ports_list); do
            do_build $P
        done
        ;;
    list|l)
        if $VERBOSE; then
            for P in $(ports_list); do
                printf "%-20s %-60s\n" $P $(cat $DIR_PORTS/$P/get | sed -n 's,.* \([^ ]*://[^ ]*\).*\$SRC_DIR,\1,p')
            done
        else
            ports_list
        fi
        ;;
    build|b)
        [ -z "$1" ] && show_help
        do_build $@
        show_tips
        ;;
    install|i)
        [ -z "$1" ] && show_help
        do_build $@
        show_tips
        ;;
    autoinstall|ai)
        [ -z "$1" ] && show_help
        do_create $@
        do_build $DIR
        show_tips
        ;;
    cleanall)
            for P in $(ports_list); do
                do_clean $DIR_PORTS/$P
            done
        ;;
    *)
        show_help
        ;;
esac

